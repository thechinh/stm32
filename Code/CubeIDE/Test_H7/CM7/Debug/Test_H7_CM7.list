
Test_H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069dc  080069dc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080069e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080069f4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006a54  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  08006ab4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  08006ab4  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018d87  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a35  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001050  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c96  00000000  00000000  0003c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a475  00000000  00000000  0003d5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014bf1  00000000  00000000  00077a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017f69d  00000000  00000000  0008c64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000453c  00000000  00000000  0020bcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  00210228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006984 	.word	0x08006984

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006984 	.word	0x08006984

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <HAL_GPIO_EXTI_Callback>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	d103      	bne.n	800071a <HAL_GPIO_EXTI_Callback+0x1a>
  {
    /* Toggle LED1 */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000712:	2101      	movs	r1, #1
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <HAL_GPIO_EXTI_Callback+0x24>)
 8000716:	f001 fd02 	bl	800211e <HAL_GPIO_TogglePin>
  }
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58020400 	.word	0x58020400

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800072e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000732:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0xac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <main+0x24>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	dcf4      	bgt.n	8000736 <main+0xe>
  if ( timeout < 0 )
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	da01      	bge.n	8000756 <main+0x2e>
  {
  Error_Handler();
 8000752:	f000 fa4d 	bl	8000bf0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc99 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f83f 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0xac>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <main+0xac>)
 8000766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <main+0xac>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800077c:	2000      	movs	r0, #0
 800077e:	f001 fd03 	bl	8002188 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000782:	2100      	movs	r1, #0
 8000784:	2000      	movs	r0, #0
 8000786:	f001 fd19 	bl	80021bc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000790:	bf00      	nop
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <main+0xac>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <main+0x80>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dcf4      	bgt.n	8000792 <main+0x6a>
if ( timeout < 0 )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da01      	bge.n	80007b2 <main+0x8a>
{
Error_Handler();
 80007ae:	f000 fa1f 	bl	8000bf0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f95b 	bl	8000a6c <MX_GPIO_Init>
  MX_ETH_Init();
 80007b6:	f000 f88f 	bl	80008d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ba:	f000 f8d9 	bl	8000970 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007be:	f000 f923 	bl	8000a08 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80007c2:	2102      	movs	r1, #2
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <main+0xb0>)
 80007c6:	f001 fcaa 	bl	800211e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f000 fcef 	bl	80011b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80007d2:	e7f6      	b.n	80007c2 <main+0x9a>
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58021000 	.word	0x58021000

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f89e 	bl	800692c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 f898 	bl	800692c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f001 fe39 	bl	8002474 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <SystemClock_Config+0xf4>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <SystemClock_Config+0xf4>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <SystemClock_Config+0xf4>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <SystemClock_Config+0xf8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <SystemClock_Config+0xf8>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemClock_Config+0xf8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemClock_Config+0xf8>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	2302      	movs	r3, #2
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800085e:	2312      	movs	r3, #18
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086e:	230c      	movs	r3, #12
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000872:	2302      	movs	r3, #2
 8000874:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000876:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fe61 	bl	8002548 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800088c:	f000 f9b0 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	233f      	movs	r3, #63	; 0x3f
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2303      	movs	r3, #3
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 faa0 	bl	8002dfc <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008c2:	f000 f995 	bl	8000bf0 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3770      	adds	r7, #112	; 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800

080008d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_ETH_Init+0x80>)
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <MX_ETH_Init+0x84>)
 80008e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ETH_Init+0x88>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ETH_Init+0x88>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_ETH_Init+0x88>)
 80008f0:	22e1      	movs	r2, #225	; 0xe1
 80008f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ETH_Init+0x88>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_ETH_Init+0x88>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ETH_Init+0x88>)
 8000902:	2200      	movs	r2, #0
 8000904:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ETH_Init+0x80>)
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_ETH_Init+0x88>)
 800090a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ETH_Init+0x80>)
 800090e:	2201      	movs	r2, #1
 8000910:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ETH_Init+0x80>)
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_ETH_Init+0x8c>)
 8000916:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ETH_Init+0x80>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_ETH_Init+0x90>)
 800091c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_ETH_Init+0x80>)
 8000920:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000924:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_ETH_Init+0x80>)
 8000928:	f000 fe0c 	bl	8001544 <HAL_ETH_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000932:	f000 f95d 	bl	8000bf0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000936:	2238      	movs	r2, #56	; 0x38
 8000938:	2100      	movs	r1, #0
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_ETH_Init+0x94>)
 800093c:	f005 fff6 	bl	800692c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_ETH_Init+0x94>)
 8000942:	2221      	movs	r2, #33	; 0x21
 8000944:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_ETH_Init+0x94>)
 8000948:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800094c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_ETH_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000124 	.word	0x24000124
 800095c:	40028000 	.word	0x40028000
 8000960:	24000774 	.word	0x24000774
 8000964:	24000070 	.word	0x24000070
 8000968:	24000010 	.word	0x24000010
 800096c:	240000ec 	.word	0x240000ec

08000970 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <MX_USART3_UART_Init+0x94>)
 8000978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 fbd7 	bl	800516c <HAL_UART_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f914 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009cc:	f005 fbd9 	bl	8006182 <HAL_UARTEx_SetTxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f90b 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009de:	f005 fc0e 	bl	80061fe <HAL_UARTEx_SetRxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f902 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_USART3_UART_Init+0x90>)
 80009ee:	f005 fb8f 	bl	8006110 <HAL_UARTEx_DisableFifoMode>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f8fa 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	240001d4 	.word	0x240001d4
 8000a04:	40004800 	.word	0x40004800

08000a08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2209      	movs	r2, #9
 8000a16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	f001 fbc8 	bl	80021e4 <HAL_PCD_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f000 f8c9 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000268 	.word	0x24000268
 8000a68:	40080000 	.word	0x40080000

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a55      	ldr	r2, [pc, #340]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a4e      	ldr	r2, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a37      	ldr	r2, [pc, #220]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	4822      	ldr	r0, [pc, #136]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b5a:	f001 fac7 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	4821      	ldr	r0, [pc, #132]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b64:	f001 fac2 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481b      	ldr	r0, [pc, #108]	; (8000bec <MX_GPIO_Init+0x180>)
 8000b80:	f001 f904 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b9c:	f001 f8f6 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000bb8:	f001 f8e8 	bl	8001d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	2028      	movs	r0, #40	; 0x28
 8000bc2:	f000 fc8a 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f000 fca1 	bl	800150e <HAL_NVIC_EnableIRQ>

  /* Configure the second CPU (CM4) EXTI line for IT*/
  HAL_EXTI_D2_EventInputConfig(EXTI_LINE13 , EXTI_MODE_IT,  ENABLE);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f000 fb30 	bl	8001238 <HAL_EXTI_D2_EventInputConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58021000 	.word	0x58021000
 8000bec:	58020800 	.word	0x58020800

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x3c>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_MspInit+0x3c>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x3c>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2041      	movs	r0, #65	; 0x41
 8000c26:	f000 fc58 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000c2a:	2041      	movs	r0, #65	; 0x41
 8000c2c:	f000 fc6f 	bl	800150e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <HAL_ETH_MspInit+0x184>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f040 80ab 	bne.w	8000db6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c60:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c66:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c70:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c84:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca2:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cac:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d32:	2332      	movs	r3, #50	; 0x32
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <HAL_ETH_MspInit+0x18c>)
 8000d4e:	f001 f81d 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d52:	2386      	movs	r3, #134	; 0x86
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d62:	230b      	movs	r3, #11
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <HAL_ETH_MspInit+0x190>)
 8000d6e:	f001 f80d 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d84:	230b      	movs	r3, #11
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <HAL_ETH_MspInit+0x194>)
 8000d90:	f000 fffc 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da6:	230b      	movs	r3, #11
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_ETH_MspInit+0x198>)
 8000db2:	f000 ffeb 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58020400 	.word	0x58020400
 8000dd4:	58021800 	.word	0x58021800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ba      	sub	sp, #232	; 0xe8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	22c0      	movs	r2, #192	; 0xc0
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fd97 	bl	800692c <memset>
  if(huart->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_UART_MspInit+0xc8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d146      	bne.n	8000e96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e08:	f04f 0202 	mov.w	r2, #2
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fb78 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2a:	f7ff fee1 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0xd0>)
 8000e92:	f000 ff7b 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37e8      	adds	r7, #232	; 0xe8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ba      	sub	sp, #232	; 0xe8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	22c0      	movs	r2, #192	; 0xc0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 fd2d 	bl	800692c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a38      	ldr	r2, [pc, #224]	; (8000fb8 <HAL_PCD_MspInit+0x10c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d169      	bne.n	8000fb0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000edc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000eec:	2312      	movs	r3, #18
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000f02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f06:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fafd 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f20:	f7ff fe66 	bl	8000bf0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f24:	f001 fb00 	bl	8002528 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f60:	230a      	movs	r3, #10
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <HAL_PCD_MspInit+0x114>)
 8000f6e:	f000 ff0d 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <HAL_PCD_MspInit+0x114>)
 8000f8e:	f000 fefd 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_PCD_MspInit+0x110>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37e8      	adds	r7, #232	; 0xe8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40080000 	.word	0x40080000
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020000 	.word	0x58020000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8ae 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800101c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001020:	f001 f897 	bl	8002152 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff faca 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f005 fc69 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fb5d 	bl	8000728 <main>
  bx  lr
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001074:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001078:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800107c:	080069e4 	.word	0x080069e4
  ldr r2, =_sbss
 8001080:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001084:	24000780 	.word	0x24000780

08001088 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC3_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 fa16 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001098:	f002 f866 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800109c:	4602      	mov	r2, r0
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_Init+0x68>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4913      	ldr	r1, [pc, #76]	; (80010f8 <HAL_Init+0x6c>)
 80010aa:	5ccb      	ldrb	r3, [r1, r3]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_Init+0x68>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_Init+0x6c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_Init+0x70>)
 80010ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_Init+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f814 	bl	8001104 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e002      	b.n	80010ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fd89 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58024400 	.word	0x58024400
 80010f8:	0800699c 	.word	0x0800699c
 80010fc:	24000004 	.word	0x24000004
 8001100:	24000000 	.word	0x24000000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e021      	b.n	800115c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_InitTick+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f9fb 	bl	800152a <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f000 f9c5 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x68>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2400000c 	.word	0x2400000c
 8001168:	24000000 	.word	0x24000000
 800116c:	24000008 	.word	0x24000008

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2400000c 	.word	0x2400000c
 8001194:	2400077c 	.word	0x2400077c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2400077c 	.word	0x2400077c

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400000c 	.word	0x2400000c

080011f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetREVID+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0c1b      	lsrs	r3, r3, #16
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	5c001000 	.word	0x5c001000

08001210 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	58000400 	.word	0x58000400

08001238 <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02d      	beq.n	80012aa <HAL_EXTI_D2_EventInputConfig+0x72>
  {
    if( EXTI_LineCmd == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d116      	bne.n	8001282 <HAL_EXTI_D2_EventInputConfig+0x4a>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	095a      	lsrs	r2, r3, #5
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_EXTI_D2_EventInputConfig+0xe4>)
 800125a:	4413      	add	r3, r2
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	2201      	movs	r2, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43da      	mvns	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0958      	lsrs	r0, r3, #5
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001274:	4403      	add	r3, r0
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4618      	mov	r0, r3
 800127a:	ea01 0302 	and.w	r3, r1, r2
 800127e:	6003      	str	r3, [r0, #0]
 8001280:	e013      	b.n	80012aa <HAL_EXTI_D2_EventInputConfig+0x72>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	095a      	lsrs	r2, r3, #5
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8001288:	4413      	add	r3, r2
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	2201      	movs	r2, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	0958      	lsrs	r0, r3, #5
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_EXTI_D2_EventInputConfig+0xe4>)
 800129e:	4403      	add	r3, r0
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4618      	mov	r0, r3
 80012a4:	ea41 0302 	orr.w	r3, r1, r2
 80012a8:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d02d      	beq.n	8001310 <HAL_EXTI_D2_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_EXTI_D2_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	095b      	lsrs	r3, r3, #5
 80012be:	011a      	lsls	r2, r3, #4
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80012c2:	4413      	add	r3, r2
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	2201      	movs	r2, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	0118      	lsls	r0, r3, #4
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80012dc:	4403      	add	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	ea01 0302 	and.w	r3, r1, r2
 80012e4:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 80012e6:	e013      	b.n	8001310 <HAL_EXTI_D2_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	011a      	lsls	r2, r3, #4
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80012f0:	4413      	add	r3, r2
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2201      	movs	r2, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	0118      	lsls	r0, r3, #4
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8001306:	4403      	add	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	ea41 0302 	orr.w	r3, r1, r2
 800130e:	6003      	str	r3, [r0, #0]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	0580000c 	.word	0x0580000c
 8001320:	580000c4 	.word	0x580000c4

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <__NVIC_SetPriorityGrouping+0x40>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	4313      	orrs	r3, r2
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x40>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	05fa0000 	.word	0x05fa0000

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff40 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff33 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa4 	bl	8001480 <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0cf      	b.n	80016f6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2223      	movs	r2, #35	; 0x23
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fb67 	bl	8000c3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_ETH_Init+0x1bc>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001574:	4a62      	ldr	r2, [pc, #392]	; (8001700 <HAL_ETH_Init+0x1bc>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_ETH_Init+0x1bc>)
 8001580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7a1b      	ldrb	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fe3b 	bl	8001210 <HAL_SYSCFG_ETHInterfaceSelect>
 800159a:	e003      	b.n	80015a4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800159c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015a0:	f7ff fe36 	bl	8001210 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_ETH_Init+0x1c0>)
 80015a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff fdea 	bl	8001198 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015c6:	e011      	b.n	80015ec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015c8:	f7ff fde6 	bl	8001198 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d6:	d909      	bls.n	80015ec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2204      	movs	r2, #4
 80015dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	22e0      	movs	r2, #224	; 0xe0
 80015e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e084      	b.n	80016f6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e4      	bne.n	80015c8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f886 	bl	8001710 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001604:	f001 ff2a 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8001608:	4603      	mov	r3, r0
 800160a:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <HAL_ETH_Init+0x1c4>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9a      	lsrs	r2, r3, #18
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3a01      	subs	r2, #1
 8001618:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa71 	bl	8001b04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800162e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22e0      	movs	r2, #224	; 0xe0
 800165a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e049      	b.n	80016f6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_ETH_Init+0x1c8>)
 8001670:	4013      	ands	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6952      	ldr	r2, [r2, #20]
 8001676:	0051      	lsls	r1, r2, #1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001682:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fad9 	bl	8001c3e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fb1f 	bl	8001cd0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	3305      	adds	r3, #5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021a      	lsls	r2, r3, #8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	3303      	adds	r3, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	3302      	adds	r3, #2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016de:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2210      	movs	r2, #16
 80016f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	58024400 	.word	0x58024400
 8001704:	58000400 	.word	0x58000400
 8001708:	431bde83 	.word	0x431bde83
 800170c:	ffff8001 	.word	0xffff8001

08001710 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001720:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001728:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800172a:	f001 fe97 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800172e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d908      	bls.n	800174a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d804      	bhi.n	800174a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e027      	b.n	800179a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d908      	bls.n	8001764 <HAL_ETH_SetMDIOClockRange+0x54>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d204      	bcs.n	8001764 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e01a      	b.n	800179a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d303      	bcc.n	8001774 <HAL_ETH_SetMDIOClockRange+0x64>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d911      	bls.n	8001798 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d908      	bls.n	800178e <HAL_ETH_SetMDIOClockRange+0x7e>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d804      	bhi.n	800178e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e005      	b.n	800179a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e000      	b.n	800179a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001798:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	01312cff 	.word	0x01312cff
 80017b0:	02160ebf 	.word	0x02160ebf
 80017b4:	03938700 	.word	0x03938700
 80017b8:	05f5e0ff 	.word	0x05f5e0ff
 80017bc:	08f0d17f 	.word	0x08f0d17f

080017c0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80017d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	791b      	ldrb	r3, [r3, #4]
 80017d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7b1b      	ldrb	r3, [r3, #12]
 80017e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80017e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	7b5b      	ldrb	r3, [r3, #13]
 80017e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7b9b      	ldrb	r3, [r3, #14]
 80017f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	7bdb      	ldrb	r3, [r3, #15]
 80017f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	7c12      	ldrb	r2, [r2, #16]
 8001800:	2a00      	cmp	r2, #0
 8001802:	d102      	bne.n	800180a <ETH_SetMACConfig+0x4a>
 8001804:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001808:	e000      	b.n	800180c <ETH_SetMACConfig+0x4c>
 800180a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800180c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	7c52      	ldrb	r2, [r2, #17]
 8001812:	2a00      	cmp	r2, #0
 8001814:	d102      	bne.n	800181c <ETH_SetMACConfig+0x5c>
 8001816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181a:	e000      	b.n	800181e <ETH_SetMACConfig+0x5e>
 800181c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800181e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	7c9b      	ldrb	r3, [r3, #18]
 8001824:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001826:	431a      	orrs	r2, r3
               macconf->Speed |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800182c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7f1b      	ldrb	r3, [r3, #28]
 8001838:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800183a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	7f5b      	ldrb	r3, [r3, #29]
 8001840:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001842:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	7f92      	ldrb	r2, [r2, #30]
 8001848:	2a00      	cmp	r2, #0
 800184a:	d102      	bne.n	8001852 <ETH_SetMACConfig+0x92>
 800184c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001850:	e000      	b.n	8001854 <ETH_SetMACConfig+0x94>
 8001852:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001854:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	7fdb      	ldrb	r3, [r3, #31]
 800185a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800185c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001864:	2a00      	cmp	r2, #0
 8001866:	d102      	bne.n	800186e <ETH_SetMACConfig+0xae>
 8001868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186c:	e000      	b.n	8001870 <ETH_SetMACConfig+0xb0>
 800186e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001870:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800187e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001880:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <ETH_SetMACConfig+0x22c>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	430b      	orrs	r3, r1
 800189c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d102      	bne.n	80018d2 <ETH_SetMACConfig+0x112>
 80018cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x114>
 80018d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <ETH_SetMACConfig+0x230>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	430b      	orrs	r3, r1
 80018f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <ETH_SetMACConfig+0x234>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800191c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001922:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800192a:	2a00      	cmp	r2, #0
 800192c:	d101      	bne.n	8001932 <ETH_SetMACConfig+0x172>
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	e000      	b.n	8001934 <ETH_SetMACConfig+0x174>
 8001932:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001934:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001946:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	430b      	orrs	r3, r1
 8001954:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800195c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001964:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f023 0103 	bic.w	r1, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	430a      	orrs	r2, r1
 800197e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800198a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d101      	bne.n	80019ae <ETH_SetMACConfig+0x1ee>
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	e000      	b.n	80019b0 <ETH_SetMACConfig+0x1f0>
 80019ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80019b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80019c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	430a      	orrs	r2, r1
 80019dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	00048083 	.word	0x00048083
 80019f0:	c0f88000 	.word	0xc0f88000
 80019f4:	fffffef0 	.word	0xfffffef0

080019f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <ETH_SetDMAConfig+0xf8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	6811      	ldr	r1, [r2, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a1e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	791b      	ldrb	r3, [r3, #4]
 8001a24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7b1b      	ldrb	r3, [r3, #12]
 8001a30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <ETH_SetDMAConfig+0xfc>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a50:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	7b5b      	ldrb	r3, [r3, #13]
 8001a56:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <ETH_SetDMAConfig+0x100>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	430b      	orrs	r3, r1
 8001a78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a7c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7d1b      	ldrb	r3, [r3, #20]
 8001a88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7f5b      	ldrb	r3, [r3, #29]
 8001a90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <ETH_SetDMAConfig+0x104>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	7f1b      	ldrb	r3, [r3, #28]
 8001aba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001acc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <ETH_SetDMAConfig+0x108>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	ffff87fd 	.word	0xffff87fd
 8001af4:	ffff2ffe 	.word	0xffff2ffe
 8001af8:	fffec000 	.word	0xfffec000
 8001afc:	ffc0efef 	.word	0xffc0efef
 8001b00:	7fc0ffff 	.word	0x7fc0ffff

08001b04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0a4      	sub	sp, #144	; 0x90
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b12:	2300      	movs	r3, #0
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b5c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001b60:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b86:	2300      	movs	r3, #0
 8001b88:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001bde:	2300      	movs	r3, #0
 8001be0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fde6 	bl	80017c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c24:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fee1 	bl	80019f8 <ETH_SetDMAConfig>
}
 8001c36:	bf00      	nop
 8001c38:	3790      	adds	r7, #144	; 0x90
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e01d      	b.n	8001c88 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	3206      	adds	r2, #6
 8001c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d9de      	bls.n	8001c4c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e023      	b.n	8001d26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	3212      	adds	r2, #18
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d9d8      	bls.n	8001cde <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d52:	461a      	mov	r2, r3
 8001d54:	2303      	movs	r3, #3
 8001d56:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d9a:	4b89      	ldr	r3, [pc, #548]	; (8001fc0 <HAL_GPIO_Init+0x234>)
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9e:	e194      	b.n	80020ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8186 	beq.w	80020c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x44>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d017      	beq.n	8001e6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80e0 	beq.w	80020c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_GPIO_Init+0x238>)
 8001f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f0a:	4a2e      	ldr	r2, [pc, #184]	; (8001fc4 <HAL_GPIO_Init+0x238>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_GPIO_Init+0x238>)
 8001f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x23c>)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_GPIO_Init+0x240>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d052      	beq.n	8001ff4 <HAL_GPIO_Init+0x268>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_GPIO_Init+0x244>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d031      	beq.n	8001fba <HAL_GPIO_Init+0x22e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_GPIO_Init+0x248>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02b      	beq.n	8001fb6 <HAL_GPIO_Init+0x22a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_GPIO_Init+0x24c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d025      	beq.n	8001fb2 <HAL_GPIO_Init+0x226>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_GPIO_Init+0x250>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01f      	beq.n	8001fae <HAL_GPIO_Init+0x222>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x254>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_GPIO_Init+0x21e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_GPIO_Init+0x258>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_GPIO_Init+0x25c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x260>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_GPIO_Init+0x264>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_Init+0x20e>
 8001f96:	2309      	movs	r3, #9
 8001f98:	e02d      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	e02b      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	e029      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	e027      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e025      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e023      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e021      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e01f      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e01d      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e01b      	b.n	8001ff6 <HAL_GPIO_Init+0x26a>
 8001fbe:	bf00      	nop
 8001fc0:	58000080 	.word	0x58000080
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	58000400 	.word	0x58000400
 8001fcc:	58020000 	.word	0x58020000
 8001fd0:	58020400 	.word	0x58020400
 8001fd4:	58020800 	.word	0x58020800
 8001fd8:	58020c00 	.word	0x58020c00
 8001fdc:	58021000 	.word	0x58021000
 8001fe0:	58021400 	.word	0x58021400
 8001fe4:	58021800 	.word	0x58021800
 8001fe8:	58021c00 	.word	0x58021c00
 8001fec:	58022000 	.word	0x58022000
 8001ff0:	58022400 	.word	0x58022400
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002006:	4938      	ldr	r1, [pc, #224]	; (80020e8 <HAL_GPIO_Init+0x35c>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3301      	adds	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f ae63 	bne.w	8001da0 <HAL_GPIO_Init+0x14>
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	3724      	adds	r7, #36	; 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	58000400 	.word	0x58000400

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43d9      	mvns	r1, r3
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	400b      	ands	r3, r1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fac1 	bl	8000700 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002190:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_HSEM_FastTake+0x2c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3320      	adds	r3, #32
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_HSEM_FastTake+0x30>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	58026400 	.word	0x58026400
 80021b8:	80000300 	.word	0x80000300

080021bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021c6:	4906      	ldr	r1, [pc, #24]	; (80021e0 <HAL_HSEM_Release+0x24>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	58026400 	.word	0x58026400

080021e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e6:	b08f      	sub	sp, #60	; 0x3c
 80021e8:	af0a      	add	r7, sp, #40	; 0x28
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e116      	b.n	8002424 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe fe4b 	bl	8000eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2203      	movs	r2, #3
 800221a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 f8dd 	bl	80063f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	687e      	ldr	r6, [r7, #4]
 8002242:	466d      	mov	r5, sp
 8002244:	f106 0410 	add.w	r4, r6, #16
 8002248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002254:	e885 0003 	stmia.w	r5, {r0, r1}
 8002258:	1d33      	adds	r3, r6, #4
 800225a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225c:	6838      	ldr	r0, [r7, #0]
 800225e:	f004 f85b 	bl	8006318 <USB_CoreInit>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d7      	b.n	8002424 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f004 f8cb 	bl	8006416 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e04a      	b.n	800231c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	333d      	adds	r3, #61	; 0x3d
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	; 0x3c
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	b298      	uxth	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3356      	adds	r3, #86	; 0x56
 80022c2:	4602      	mov	r2, r0
 80022c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3340      	adds	r3, #64	; 0x40
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3344      	adds	r3, #68	; 0x44
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3348      	adds	r3, #72	; 0x48
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	334c      	adds	r3, #76	; 0x4c
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3301      	adds	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3af      	bcc.n	8002286 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e044      	b.n	80023b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3b5      	bcc.n	800232c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	687e      	ldr	r6, [r7, #4]
 80023c8:	466d      	mov	r5, sp
 80023ca:	f106 0410 	add.w	r4, r6, #16
 80023ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023da:	e885 0003 	stmia.w	r5, {r0, r1}
 80023de:	1d33      	adds	r3, r6, #4
 80023e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f004 f864 	bl	80064b0 <USB_DevInit>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e014      	b.n	8002424 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f80a 	bl	800242c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f004 fa22 	bl	8006866 <USB_DevDisconnect>

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800242c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_PCDEx_ActivateLPM+0x44>)
 800245c:	4313      	orrs	r3, r2
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	10000003 	.word	0x10000003

08002474 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	2b06      	cmp	r3, #6
 8002486:	d00a      	beq.n	800249e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e040      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e03e      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024a6:	491f      	ldr	r1, [pc, #124]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ae:	f7fe fe73 	bl	8001198 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b4:	e009      	b.n	80024ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b6:	f7fe fe6f 	bl	8001198 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d901      	bls.n	80024ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e028      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d1ee      	bne.n	80024b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b1e      	cmp	r3, #30
 80024dc:	d008      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b2e      	cmp	r3, #46	; 0x2e
 80024e2:	d005      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b1d      	cmp	r3, #29
 80024e8:	d002      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b2d      	cmp	r3, #45	; 0x2d
 80024ee:	d114      	bne.n	800251a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024f0:	f7fe fe52 	bl	8001198 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f6:	e009      	b.n	800250c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024f8:	f7fe fe4e 	bl	8001198 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002506:	d901      	bls.n	800250c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e007      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d1ee      	bne.n	80024f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	58024800 	.word	0x58024800

08002528 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f000 bc48 	b.w	8002dec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8088 	beq.w	800267a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b99      	ldr	r3, [pc, #612]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002574:	4b96      	ldr	r3, [pc, #600]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2b10      	cmp	r3, #16
 800257e:	d007      	beq.n	8002590 <HAL_RCC_OscConfig+0x48>
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	2b18      	cmp	r3, #24
 8002584:	d111      	bne.n	80025aa <HAL_RCC_OscConfig+0x62>
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b8f      	ldr	r3, [pc, #572]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d06d      	beq.n	8002678 <HAL_RCC_OscConfig+0x130>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d169      	bne.n	8002678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f000 bc21 	b.w	8002dec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x7a>
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a85      	ldr	r2, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e02e      	b.n	8002620 <HAL_RCC_OscConfig+0xd8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x9c>
 80025ca:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7d      	ldr	r2, [pc, #500]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xd8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0xc0>
 80025ee:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a74      	ldr	r2, [pc, #464]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xd8>
 8002608:	4b71      	ldr	r3, [pc, #452]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a70      	ldr	r2, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b6e      	ldr	r3, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6d      	ldr	r2, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fdb6 	bl	8001198 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fdb2 	bl	8001198 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e3d4      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xe8>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fda2 	bl	8001198 <HAL_GetTick>
 8002654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fd9e 	bl	8001198 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e3c0      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x110>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80ca 	beq.w	800281c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002688:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002690:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002692:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_RCC_OscConfig+0x166>
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2b18      	cmp	r3, #24
 80026a2:	d156      	bne.n	8002752 <HAL_RCC_OscConfig+0x20a>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d151      	bne.n	8002752 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ae:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_RCC_OscConfig+0x17e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e392      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c6:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0219 	bic.w	r2, r3, #25
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	493f      	ldr	r1, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd5e 	bl	8001198 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe fd5a 	bl	8001198 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e37c      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	f7fe fd7b 	bl	80011f8 <HAL_GetREVID>
 8002702:	4603      	mov	r3, r0
 8002704:	f241 0203 	movw	r2, #4099	; 0x1003
 8002708:	4293      	cmp	r3, r2
 800270a:	d817      	bhi.n	800273c <HAL_RCC_OscConfig+0x1f4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d108      	bne.n	8002726 <HAL_RCC_OscConfig+0x1de>
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800271c:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	e07a      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	4926      	ldr	r1, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273a:	e06f      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4921      	ldr	r1, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002750:	e064      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d047      	beq.n	80027ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0219 	bic.w	r2, r3, #25
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	491a      	ldr	r1, [pc, #104]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fd14 	bl	8001198 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe fd10 	bl	8001198 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e332      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	f7fe fd31 	bl	80011f8 <HAL_GetREVID>
 8002796:	4603      	mov	r3, r0
 8002798:	f241 0203 	movw	r2, #4099	; 0x1003
 800279c:	4293      	cmp	r3, r2
 800279e:	d819      	bhi.n	80027d4 <HAL_RCC_OscConfig+0x28c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d108      	bne.n	80027ba <HAL_RCC_OscConfig+0x272>
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b6:	6053      	str	r3, [r2, #4]
 80027b8:	e030      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	031b      	lsls	r3, r3, #12
 80027c8:	4901      	ldr	r1, [pc, #4]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
 80027ce:	e025      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
 80027d0:	58024400 	.word	0x58024400
 80027d4:	4b9a      	ldr	r3, [pc, #616]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4997      	ldr	r1, [pc, #604]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b95      	ldr	r3, [pc, #596]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fccf 	bl	8001198 <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fe fccb 	bl	8001198 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e2ed      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002810:	4b8b      	ldr	r3, [pc, #556]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a9 	beq.w	800297c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002832:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d007      	beq.n	8002850 <HAL_RCC_OscConfig+0x308>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b18      	cmp	r3, #24
 8002844:	d13a      	bne.n	80028bc <HAL_RCC_OscConfig+0x374>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d135      	bne.n	80028bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_OscConfig+0x320>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e2c1      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002868:	f7fe fcc6 	bl	80011f8 <HAL_GetREVID>
 800286c:	4603      	mov	r3, r0
 800286e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002872:	4293      	cmp	r3, r2
 8002874:	d817      	bhi.n	80028a6 <HAL_RCC_OscConfig+0x35e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	2b20      	cmp	r3, #32
 800287c:	d108      	bne.n	8002890 <HAL_RCC_OscConfig+0x348>
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800288c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800288e:	e075      	b.n	800297c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	4968      	ldr	r1, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a4:	e06a      	b.n	800297c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a6:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	4962      	ldr	r1, [pc, #392]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ba:	e05f      	b.n	800297c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d042      	beq.n	800294a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5d      	ldr	r2, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fc62 	bl	8001198 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028d8:	f7fe fc5e 	bl	8001198 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e280      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f6:	f7fe fc7f 	bl	80011f8 <HAL_GetREVID>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002900:	4293      	cmp	r3, r2
 8002902:	d817      	bhi.n	8002934 <HAL_RCC_OscConfig+0x3ec>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	2b20      	cmp	r3, #32
 800290a:	d108      	bne.n	800291e <HAL_RCC_OscConfig+0x3d6>
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800291a:	6053      	str	r3, [r2, #4]
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0x434>
 800291e:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	4944      	ldr	r1, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
 8002932:	e023      	b.n	800297c <HAL_RCC_OscConfig+0x434>
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	493f      	ldr	r1, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e018      	b.n	800297c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe fc1f 	bl	8001198 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800295e:	f7fe fc1b 	bl	8001198 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e23d      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d036      	beq.n	80029f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d019      	beq.n	80029c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fbfc 	bl	8001198 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fbf8 	bl	8001198 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e21a      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x45c>
 80029c2:	e018      	b.n	80029f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fbe2 	bl	8001198 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fbde 	bl	8001198 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e200      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d039      	beq.n	8002a76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fbbf 	bl	8001198 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1e:	f7fe fbbb 	bl	8001198 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1dd      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
 8002a3c:	e01b      	b.n	8002a76 <HAL_RCC_OscConfig+0x52e>
 8002a3e:	bf00      	nop
 8002a40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a44:	4b9b      	ldr	r3, [pc, #620]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a9a      	ldr	r2, [pc, #616]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fba2 	bl	8001198 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fe fb9e 	bl	8001198 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1c0      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a6a:	4b92      	ldr	r3, [pc, #584]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8081 	beq.w	8002b86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a84:	4b8c      	ldr	r3, [pc, #560]	; (8002cb8 <HAL_RCC_OscConfig+0x770>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a8b      	ldr	r2, [pc, #556]	; (8002cb8 <HAL_RCC_OscConfig+0x770>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fb82 	bl	8001198 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe fb7e 	bl	8001198 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1a0      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aaa:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_RCC_OscConfig+0x770>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x584>
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e02d      	b.n	8002b28 <HAL_RCC_OscConfig+0x5e0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x5a6>
 8002ad4:	4b77      	ldr	r3, [pc, #476]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a76      	ldr	r2, [pc, #472]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b74      	ldr	r3, [pc, #464]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a73      	ldr	r2, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e01c      	b.n	8002b28 <HAL_RCC_OscConfig+0x5e0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5c8>
 8002af6:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0x5e0>
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a64      	ldr	r2, [pc, #400]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fb32 	bl	8001198 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fb2e 	bl	8001198 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e14e      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b4e:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x5f0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fb1c 	bl	8001198 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fb18 	bl	8001198 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e138      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 812d 	beq.w	8002dea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	f000 80bd 	beq.w	8002d18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	f040 809e 	bne.w	8002ce4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe faf0 	bl	8001198 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe faec 	bl	8001198 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e10e      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bce:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x774>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	430a      	orrs	r2, r1
 8002bee:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	3b01      	subs	r3, #1
 8002c04:	025b      	lsls	r3, r3, #9
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c24:	4923      	ldr	r1, [pc, #140]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x778>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c42:	00d2      	lsls	r2, r2, #3
 8002c44:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f023 020c 	bic.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4917      	ldr	r1, [pc, #92]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f023 0202 	bic.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4912      	ldr	r1, [pc, #72]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fa75 	bl	8001198 <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb0:	e011      	b.n	8002cd6 <HAL_RCC_OscConfig+0x78e>
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	58024800 	.word	0x58024800
 8002cbc:	fffffc0c 	.word	0xfffffc0c
 8002cc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fa68 	bl	8001198 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e08a      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x77c>
 8002ce2:	e082      	b.n	8002dea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa52 	bl	8001198 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fa4e 	bl	8001198 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e070      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x7b0>
 8002d16:	e068      	b.n	8002dea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d1e:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d031      	beq.n	8002d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0203 	and.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d12a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d122      	bne.n	8002d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d11a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0a5b      	lsrs	r3, r3, #9
 8002d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d111      	bne.n	8002d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0e1b      	lsrs	r3, r3, #24
 8002d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e02b      	b.n	8002dec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	08db      	lsrs	r3, r3, #3
 8002d9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d01f      	beq.n	8002dea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002db6:	f7fe f9ef 	bl	8001198 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dbc:	bf00      	nop
 8002dbe:	f7fe f9eb 	bl	8001198 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d0f9      	beq.n	8002dbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x8b0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dd6:	00d2      	lsls	r2, r2, #3
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_RCC_OscConfig+0x8ac>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3730      	adds	r7, #48	; 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400
 8002df8:	ffff0007 	.word	0xffff0007

08002dfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e19c      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b8a      	ldr	r3, [pc, #552]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	4985      	ldr	r1, [pc, #532]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b83      	ldr	r3, [pc, #524]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e184      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d908      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e5c:	4b78      	ldr	r3, [pc, #480]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	4975      	ldr	r1, [pc, #468]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	4b70      	ldr	r3, [pc, #448]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d908      	bls.n	8002e9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e8a:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	496a      	ldr	r1, [pc, #424]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d908      	bls.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eb8:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	495e      	ldr	r1, [pc, #376]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d908      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ee6:	4b56      	ldr	r3, [pc, #344]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4953      	ldr	r1, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d908      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f023 020f 	bic.w	r2, r3, #15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4947      	ldr	r1, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d055      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4940      	ldr	r1, [pc, #256]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f4c:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d121      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f6      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0ea      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0de      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0d6      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f023 0207 	bic.w	r2, r3, #7
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4925      	ldr	r1, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fae:	f7fe f8f3 	bl	8001198 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb6:	f7fe f8ef 	bl	8001198 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0be      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d1eb      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d208      	bcs.n	800300c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f023 020f 	bic.w	r2, r3, #15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x244>)
 8003008:	4313      	orrs	r3, r2
 800300a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d214      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 020f 	bic.w	r2, r3, #15
 8003022:	4906      	ldr	r1, [pc, #24]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_ClockConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e086      	b.n	800314a <HAL_RCC_ClockConfig+0x34e>
 800303c:	52002000 	.word	0x52002000
 8003040:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305c:	429a      	cmp	r2, r3
 800305e:	d208      	bcs.n	8003072 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	4939      	ldr	r1, [pc, #228]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 800306e:	4313      	orrs	r3, r2
 8003070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800308a:	429a      	cmp	r2, r3
 800308c:	d208      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	492e      	ldr	r1, [pc, #184]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d208      	bcs.n	80030ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4922      	ldr	r1, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d208      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4917      	ldr	r1, [pc, #92]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030fc:	f000 f834 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	4912      	ldr	r1, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x35c>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_RCC_ClockConfig+0x358>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <HAL_RCC_ClockConfig+0x35c>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x360>)
 8003132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x364>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x368>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd ffe0 	bl	8001104 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
 8003158:	0800699c 	.word	0x0800699c
 800315c:	24000004 	.word	0x24000004
 8003160:	24000000 	.word	0x24000000
 8003164:	24000008 	.word	0x24000008

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316e:	4bb3      	ldr	r3, [pc, #716]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003176:	2b18      	cmp	r3, #24
 8003178:	f200 8155 	bhi.w	8003426 <HAL_RCC_GetSysClockFreq+0x2be>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <HAL_RCC_GetSysClockFreq+0x1c>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031e9 	.word	0x080031e9
 8003188:	08003427 	.word	0x08003427
 800318c:	08003427 	.word	0x08003427
 8003190:	08003427 	.word	0x08003427
 8003194:	08003427 	.word	0x08003427
 8003198:	08003427 	.word	0x08003427
 800319c:	08003427 	.word	0x08003427
 80031a0:	08003427 	.word	0x08003427
 80031a4:	0800320f 	.word	0x0800320f
 80031a8:	08003427 	.word	0x08003427
 80031ac:	08003427 	.word	0x08003427
 80031b0:	08003427 	.word	0x08003427
 80031b4:	08003427 	.word	0x08003427
 80031b8:	08003427 	.word	0x08003427
 80031bc:	08003427 	.word	0x08003427
 80031c0:	08003427 	.word	0x08003427
 80031c4:	08003215 	.word	0x08003215
 80031c8:	08003427 	.word	0x08003427
 80031cc:	08003427 	.word	0x08003427
 80031d0:	08003427 	.word	0x08003427
 80031d4:	08003427 	.word	0x08003427
 80031d8:	08003427 	.word	0x08003427
 80031dc:	08003427 	.word	0x08003427
 80031e0:	08003427 	.word	0x08003427
 80031e4:	0800321b 	.word	0x0800321b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031f4:	4b91      	ldr	r3, [pc, #580]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003206:	e111      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003208:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800320a:	61bb      	str	r3, [r7, #24]
      break;
 800320c:	e10e      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800320e:	4b8d      	ldr	r3, [pc, #564]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003210:	61bb      	str	r3, [r7, #24]
      break;
 8003212:	e10b      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003214:	4b8c      	ldr	r3, [pc, #560]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003216:	61bb      	str	r3, [r7, #24]
      break;
 8003218:	e108      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003224:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003230:	4b82      	ldr	r3, [pc, #520]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800323a:	4b80      	ldr	r3, [pc, #512]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003252:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80e1 	beq.w	8003420 <HAL_RCC_GetSysClockFreq+0x2b8>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b02      	cmp	r3, #2
 8003262:	f000 8083 	beq.w	800336c <HAL_RCC_GetSysClockFreq+0x204>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b02      	cmp	r3, #2
 800326a:	f200 80a1 	bhi.w	80033b0 <HAL_RCC_GetSysClockFreq+0x248>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x114>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d056      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x1c0>
 800327a:	e099      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02d      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003288:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	4a6b      	ldr	r2, [pc, #428]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	ee07 3a90 	vmov	s15, r3
 80032a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800344c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032e2:	e087      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800344c <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003326:	e065      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b40      	ldr	r3, [pc, #256]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800344c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336a:	e043      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003458 <HAL_RCC_GetSysClockFreq+0x2f0>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800344c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ae:	e021      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800344c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	0a5b      	lsrs	r3, r3, #9
 80033fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033fe:	3301      	adds	r3, #1
 8003400:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800340c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003418:	ee17 3a90 	vmov	r3, s15
 800341c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800341e:	e005      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
      break;
 8003424:	e002      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003428:	61bb      	str	r3, [r7, #24]
      break;
 800342a:	bf00      	nop
  }

  return sysclockfreq;
 800342c:	69bb      	ldr	r3, [r7, #24]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	58024400 	.word	0x58024400
 8003440:	03d09000 	.word	0x03d09000
 8003444:	003d0900 	.word	0x003d0900
 8003448:	007a1200 	.word	0x007a1200
 800344c:	46000000 	.word	0x46000000
 8003450:	4c742400 	.word	0x4c742400
 8003454:	4a742400 	.word	0x4a742400
 8003458:	4af42400 	.word	0x4af42400

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003462:	f7ff fe81 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_GetHCLKFreq+0x50>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490f      	ldr	r1, [pc, #60]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003498:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800349a:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	58024400 	.word	0x58024400
 80034b0:	0800699c 	.word	0x0800699c
 80034b4:	24000004 	.word	0x24000004
 80034b8:	24000000 	.word	0x24000000

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034c0:	f7ff ffcc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4904      	ldr	r1, [pc, #16]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	0800699c 	.word	0x0800699c

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034ec:	f7ff ffb6 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4904      	ldr	r1, [pc, #16]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58024400 	.word	0x58024400
 8003510:	0800699c 	.word	0x0800699c

08003514 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b0ca      	sub	sp, #296	; 0x128
 800351a:	af00      	add	r7, sp, #0
 800351c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003526:	2300      	movs	r3, #0
 8003528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003538:	2500      	movs	r5, #0
 800353a:	ea54 0305 	orrs.w	r3, r4, r5
 800353e:	d049      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800354a:	d02f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800354c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003550:	d828      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003556:	d01a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355c:	d822      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003566:	d007      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003568:	e01c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356a:	4bb8      	ldr	r3, [pc, #736]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	4ab7      	ldr	r2, [pc, #732]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003576:	e01a      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357c:	3308      	adds	r3, #8
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fc8f 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800358c:	e00f      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003592:	3328      	adds	r3, #40	; 0x28
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fd36 	bl	8005008 <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035b6:	4ba5      	ldr	r3, [pc, #660]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c4:	4aa1      	ldr	r2, [pc, #644]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	6513      	str	r3, [r2, #80]	; 0x50
 80035ca:	e003      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035e0:	f04f 0900 	mov.w	r9, #0
 80035e4:	ea58 0309 	orrs.w	r3, r8, r9
 80035e8:	d047      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d82a      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003611 	.word	0x08003611
 8003600:	0800361f 	.word	0x0800361f
 8003604:	08003635 	.word	0x08003635
 8003608:	08003653 	.word	0x08003653
 800360c:	08003653 	.word	0x08003653
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003610:	4b8e      	ldr	r3, [pc, #568]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a8d      	ldr	r2, [pc, #564]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800361c:	e01a      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	3308      	adds	r3, #8
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fc3c 	bl	8004ea4 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003632:	e00f      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003638:	3328      	adds	r3, #40	; 0x28
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fce3 	bl	8005008 <RCCEx_PLL3_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003648:	e004      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	f023 0107 	bic.w	r1, r3, #7
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	4a78      	ldr	r2, [pc, #480]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6513      	str	r3, [r2, #80]	; 0x50
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003676:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003686:	f04f 0b00 	mov.w	fp, #0
 800368a:	ea5a 030b 	orrs.w	r3, sl, fp
 800368e:	d04c      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	d030      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d829      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036a2:	2bc0      	cmp	r3, #192	; 0xc0
 80036a4:	d02d      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036a6:	2bc0      	cmp	r3, #192	; 0xc0
 80036a8:	d825      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d018      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d821      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d007      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036ba:	e01c      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a62      	ldr	r2, [pc, #392]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036c8:	e01c      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	3308      	adds	r3, #8
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fbe6 	bl	8004ea4 <RCCEx_PLL2_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036de:	e011      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e4:	3328      	adds	r3, #40	; 0x28
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fc8d 	bl	8005008 <RCCEx_PLL3_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036fc:	e002      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6513      	str	r3, [r2, #80]	; 0x50
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003736:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003740:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d053      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003756:	d035      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800375c:	d82e      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800375e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003762:	d031      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003764:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003768:	d828      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d01a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003774:	d822      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800377a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377e:	d007      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003780:	e01c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a31      	ldr	r2, [pc, #196]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378e:	e01c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003794:	3308      	adds	r3, #8
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fb83 	bl	8004ea4 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037a4:	e011      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	3328      	adds	r3, #40	; 0x28
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fc2a 	bl	8005008 <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ba:	e006      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6593      	str	r3, [r2, #88]	; 0x58
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d056      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800381a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800381e:	d038      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003824:	d831      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003826:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800382a:	d034      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800382c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003830:	d82b      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003836:	d01d      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800383c:	d825      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003848:	e01f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800384a:	bf00      	nop
 800384c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003850:	4ba2      	ldr	r3, [pc, #648]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4aa1      	ldr	r2, [pc, #644]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385c:	e01c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	3308      	adds	r3, #8
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fb1c 	bl	8004ea4 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003872:	e011      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003878:	3328      	adds	r3, #40	; 0x28
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fbc3 	bl	8005008 <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038a0:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b0:	4a8a      	ldr	r2, [pc, #552]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80038cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d03a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d01f      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038ea:	2b30      	cmp	r3, #48	; 0x30
 80038ec:	d819      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d00c      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d815      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d019      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d111      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fe:	4b77      	ldr	r3, [pc, #476]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4a76      	ldr	r2, [pc, #472]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800390a:	e011      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003910:	3308      	adds	r3, #8
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fac5 	bl	8004ea4 <RCCEx_PLL2_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	4a65      	ldr	r2, [pc, #404]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003948:	430b      	orrs	r3, r1
 800394a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003962:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800396c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003970:	460b      	mov	r3, r1
 8003972:	4313      	orrs	r3, r2
 8003974:	d051      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003980:	d035      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003986:	d82e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003988:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800398c:	d031      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800398e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003992:	d828      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003998:	d01a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d822      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d007      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039aa:	e01c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ac:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4a4a      	ldr	r2, [pc, #296]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039b8:	e01c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039be:	3308      	adds	r3, #8
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 fa6e 	bl	8004ea4 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ce:	e011      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d4:	3328      	adds	r3, #40	; 0x28
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fb15 	bl	8005008 <RCCEx_PLL3_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039fc:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d056      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a44:	d033      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4a:	d82c      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a50:	d02f      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a56:	d826      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a5c:	d02b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a62:	d820      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a68:	d012      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a6e:	d81a      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d022      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	3308      	adds	r3, #8
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fa0e 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a8e:	e015      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a94:	3328      	adds	r3, #40	; 0x28
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 fab5 	bl	8005008 <RCCEx_PLL3_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00a      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aac:	e006      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aae:	bf00      	nop
 8003ab0:	e004      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e002      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad2:	4a02      	ldr	r2, [pc, #8]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ada:	bf00      	nop
 8003adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003afe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d055      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b14:	d033      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1a:	d82c      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d02f      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d826      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b2c:	d02b      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b32:	d820      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b38:	d012      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3e:	d81a      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b48:	d115      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4e:	3308      	adds	r3, #8
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f9a6 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e015      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	3328      	adds	r3, #40	; 0x28
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fa4d 	bl	8005008 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b74:	e00a      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e004      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b82:	bf00      	nop
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b94:	4ba3      	ldr	r3, [pc, #652]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba4:	4a9f      	ldr	r2, [pc, #636]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	d037      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bde:	d00e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be4:	d816      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bee:	d111      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf0:	4b8c      	ldr	r3, [pc, #560]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	4a8b      	ldr	r2, [pc, #556]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00f      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	3308      	adds	r3, #8
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f94c 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c26:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a7b      	ldr	r2, [pc, #492]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6513      	str	r3, [r2, #80]	; 0x50
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d039      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d81c      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003c85 	.word	0x08003c85
 8003c7c:	08003c93 	.word	0x08003c93
 8003c80:	08003cb1 	.word	0x08003cb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	3308      	adds	r3, #8
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f902 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	f023 0103 	bic.w	r1, r3, #3
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f000 809f 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d06:	f7fd fa47 	bl	8001198 <HAL_GetTick>
 8003d0a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fd fa42 	bl	8001198 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	; 0x64
 8003d1e:	d903      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d26:	e005      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d28:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ed      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d179      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d48:	4053      	eors	r3, r2
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d015      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d52:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d5e:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6a:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d76:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d118      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fa04 	bl	8001198 <HAL_GetTick>
 8003d90:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d94:	e00d      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd f9ff 	bl	8001198 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d903      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003db0:	e005      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db2:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0eb      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d129      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	d10e      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de8:	091a      	lsrs	r2, r3, #4
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6113      	str	r3, [r2, #16]
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e00:	6113      	str	r3, [r2, #16]
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e12:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	e00e      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e22:	e009      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58024800 	.word	0x58024800
 8003e2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 0301 	and.w	r3, r2, #1
 8003e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f000 8089 	beq.w	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e60:	2b28      	cmp	r3, #40	; 0x28
 8003e62:	d86b      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003f45 	.word	0x08003f45
 8003e70:	08003f3d 	.word	0x08003f3d
 8003e74:	08003f3d 	.word	0x08003f3d
 8003e78:	08003f3d 	.word	0x08003f3d
 8003e7c:	08003f3d 	.word	0x08003f3d
 8003e80:	08003f3d 	.word	0x08003f3d
 8003e84:	08003f3d 	.word	0x08003f3d
 8003e88:	08003f3d 	.word	0x08003f3d
 8003e8c:	08003f11 	.word	0x08003f11
 8003e90:	08003f3d 	.word	0x08003f3d
 8003e94:	08003f3d 	.word	0x08003f3d
 8003e98:	08003f3d 	.word	0x08003f3d
 8003e9c:	08003f3d 	.word	0x08003f3d
 8003ea0:	08003f3d 	.word	0x08003f3d
 8003ea4:	08003f3d 	.word	0x08003f3d
 8003ea8:	08003f3d 	.word	0x08003f3d
 8003eac:	08003f27 	.word	0x08003f27
 8003eb0:	08003f3d 	.word	0x08003f3d
 8003eb4:	08003f3d 	.word	0x08003f3d
 8003eb8:	08003f3d 	.word	0x08003f3d
 8003ebc:	08003f3d 	.word	0x08003f3d
 8003ec0:	08003f3d 	.word	0x08003f3d
 8003ec4:	08003f3d 	.word	0x08003f3d
 8003ec8:	08003f3d 	.word	0x08003f3d
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f3d 	.word	0x08003f3d
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003f3d 	.word	0x08003f3d
 8003edc:	08003f3d 	.word	0x08003f3d
 8003ee0:	08003f3d 	.word	0x08003f3d
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f3d 	.word	0x08003f3d
 8003ef4:	08003f3d 	.word	0x08003f3d
 8003ef8:	08003f3d 	.word	0x08003f3d
 8003efc:	08003f3d 	.word	0x08003f3d
 8003f00:	08003f3d 	.word	0x08003f3d
 8003f04:	08003f3d 	.word	0x08003f3d
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	08003f45 	.word	0x08003f45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f14:	3308      	adds	r3, #8
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 ffc3 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	3328      	adds	r3, #40	; 0x28
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f86a 	bl	8005008 <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f4e:	4bbf      	ldr	r3, [pc, #764]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	4abb      	ldr	r2, [pc, #748]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6553      	str	r3, [r2, #84]	; 0x54
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 0302 	and.w	r3, r2, #2
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d041      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d824      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fe9 	.word	0x08003fe9
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fcb 	.word	0x08003fcb
 8003fa8:	08003fe9 	.word	0x08003fe9
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08003fe9 	.word	0x08003fe9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb8:	3308      	adds	r3, #8
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ff71 	bl	8004ea4 <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fce:	3328      	adds	r3, #40	; 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f818 	bl	8005008 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ff2:	4b96      	ldr	r3, [pc, #600]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f023 0107 	bic.w	r1, r3, #7
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004000:	4a92      	ldr	r2, [pc, #584]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6553      	str	r3, [r2, #84]	; 0x54
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 0304 	and.w	r3, r2, #4
 800401c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004026:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d044      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	2b05      	cmp	r3, #5
 800403a:	d825      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004091 	.word	0x08004091
 8004048:	0800405d 	.word	0x0800405d
 800404c:	08004073 	.word	0x08004073
 8004050:	08004091 	.word	0x08004091
 8004054:	08004091 	.word	0x08004091
 8004058:	08004091 	.word	0x08004091
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	3308      	adds	r3, #8
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 ff1d 	bl	8004ea4 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	3328      	adds	r3, #40	; 0x28
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 ffc4 	bl	8005008 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800409a:	4b6c      	ldr	r3, [pc, #432]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	f023 0107 	bic.w	r1, r3, #7
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	4a68      	ldr	r2, [pc, #416]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6593      	str	r3, [r2, #88]	; 0x58
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f002 0320 	and.w	r3, r2, #32
 80040c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d055      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e6:	d033      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ec:	d82c      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d02f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d826      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040fe:	d02b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004100:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004104:	d820      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410a:	d012      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800410c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004110:	d81a      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d022      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411a:	d115      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004120:	3308      	adds	r3, #8
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f000 febd 	bl	8004ea4 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004130:	e015      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004136:	3328      	adds	r3, #40	; 0x28
 8004138:	2102      	movs	r1, #2
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff64 	bl	8005008 <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004146:	e00a      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800414e:	e006      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004150:	bf00      	nop
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004166:	4b39      	ldr	r3, [pc, #228]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	4a35      	ldr	r2, [pc, #212]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	430b      	orrs	r3, r1
 800417a:	6553      	str	r3, [r2, #84]	; 0x54
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800419c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d058      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041b2:	d033      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041b8:	d82c      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d02f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c4:	d826      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ca:	d02b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d0:	d820      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d012      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041dc:	d81a      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d115      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ec:	3308      	adds	r3, #8
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fe57 	bl	8004ea4 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041fc:	e015      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	3328      	adds	r3, #40	; 0x28
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fefe 	bl	8005008 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004212:	e00a      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800421a:	e006      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800421c:	bf00      	nop
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10e      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004242:	4a02      	ldr	r2, [pc, #8]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800426e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d055      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004280:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004284:	d033      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004286:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800428a:	d82c      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004290:	d02f      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004296:	d826      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004298:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800429c:	d02b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800429e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a2:	d820      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a8:	d012      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ae:	d81a      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d022      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b8:	d115      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	3308      	adds	r3, #8
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fdee 	bl	8004ea4 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ce:	e015      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d4:	3328      	adds	r3, #40	; 0x28
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fe95 	bl	8005008 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004304:	4ba1      	ldr	r3, [pc, #644]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004310:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004314:	4a9d      	ldr	r2, [pc, #628]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	430b      	orrs	r3, r1
 8004318:	6593      	str	r3, [r2, #88]	; 0x58
 800431a:	e003      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f002 0308 	and.w	r3, r2, #8
 8004330:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800433a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d01e      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fe54 	bl	8005008 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800436c:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437e:	430b      	orrs	r3, r1
 8004380:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f002 0310 	and.w	r3, r2, #16
 800438e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004398:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d01e      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ae:	d10c      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	3328      	adds	r3, #40	; 0x28
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fe25 	bl	8005008 <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ca:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043da:	4a6c      	ldr	r2, [pc, #432]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d03e      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800440c:	d022      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004412:	d81b      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d00b      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800441e:	e015      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	3308      	adds	r3, #8
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fd3b 	bl	8004ea4 <RCCEx_PLL2_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004434:	e00f      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	3328      	adds	r3, #40	; 0x28
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fde2 	bl	8005008 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800445e:	4b4b      	ldr	r3, [pc, #300]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800446e:	4a47      	ldr	r2, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	e003      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800448a:	67bb      	str	r3, [r7, #120]	; 0x78
 800448c:	2300      	movs	r3, #0
 800448e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004490:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d03b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a6:	d01f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ac:	d818      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b8:	d007      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a32      	ldr	r2, [pc, #200]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044c8:	e00f      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	3328      	adds	r3, #40	; 0x28
 80044d0:	2101      	movs	r1, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fd98 	bl	8005008 <RCCEx_PLL3_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	4a22      	ldr	r2, [pc, #136]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004504:	430b      	orrs	r3, r1
 8004506:	6553      	str	r3, [r2, #84]	; 0x54
 8004508:	e003      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800450e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800451e:	673b      	str	r3, [r7, #112]	; 0x70
 8004520:	2300      	movs	r3, #0
 8004522:	677b      	str	r3, [r7, #116]	; 0x74
 8004524:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d034      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d007      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800453e:	e011      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800454c:	e00e      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	3308      	adds	r3, #8
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fca4 	bl	8004ea4 <RCCEx_PLL2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004562:	e003      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800456a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	4a02      	ldr	r2, [pc, #8]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	430b      	orrs	r3, r1
 8004586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800458a:	bf00      	nop
 800458c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80045a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a6:	2300      	movs	r3, #0
 80045a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d00c      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b8:	3328      	adds	r3, #40	; 0x28
 80045ba:	2102      	movs	r1, #2
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fd23 	bl	8005008 <RCCEx_PLL3_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045da:	663b      	str	r3, [r7, #96]	; 0x60
 80045dc:	2300      	movs	r3, #0
 80045de:	667b      	str	r3, [r7, #100]	; 0x64
 80045e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045e4:	460b      	mov	r3, r1
 80045e6:	4313      	orrs	r3, r2
 80045e8:	d038      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f6:	d018      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d811      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004602:	d014      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d80b      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d011      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d106      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004614:	4bc3      	ldr	r3, [pc, #780]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4ac2      	ldr	r2, [pc, #776]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800463c:	4bb9      	ldr	r3, [pc, #740]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	4ab5      	ldr	r2, [pc, #724]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464e:	430b      	orrs	r3, r1
 8004650:	6553      	str	r3, [r2, #84]	; 0x54
 8004652:	e003      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004668:	65bb      	str	r3, [r7, #88]	; 0x58
 800466a:	2300      	movs	r3, #0
 800466c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800466e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004672:	460b      	mov	r3, r1
 8004674:	4313      	orrs	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004678:	4baa      	ldr	r3, [pc, #680]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004686:	4aa7      	ldr	r2, [pc, #668]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004698:	653b      	str	r3, [r7, #80]	; 0x50
 800469a:	2300      	movs	r3, #0
 800469c:	657b      	str	r3, [r7, #84]	; 0x54
 800469e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046a8:	4b9e      	ldr	r3, [pc, #632]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046b8:	4a9a      	ldr	r2, [pc, #616]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80046cc:	2300      	movs	r3, #0
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046da:	4b92      	ldr	r3, [pc, #584]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40
 80046fc:	2300      	movs	r3, #0
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004700:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800470a:	4b86      	ldr	r3, [pc, #536]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4a85      	ldr	r2, [pc, #532]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004714:	6113      	str	r3, [r2, #16]
 8004716:	4b83      	ldr	r3, [pc, #524]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004718:	6919      	ldr	r1, [r3, #16]
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004722:	4a80      	ldr	r2, [pc, #512]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
 8004736:	2300      	movs	r3, #0
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004744:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	4a74      	ldr	r2, [pc, #464]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004754:	430b      	orrs	r3, r1
 8004756:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
 8004766:	2300      	movs	r3, #0
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004774:	4b6b      	ldr	r3, [pc, #428]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004784:	4a67      	ldr	r2, [pc, #412]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	2100      	movs	r1, #0
 8004794:	62b9      	str	r1, [r7, #40]	; 0x28
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d011      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047aa:	3308      	adds	r3, #8
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fb78 	bl	8004ea4 <RCCEx_PLL2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	2100      	movs	r1, #0
 80047d4:	6239      	str	r1, [r7, #32]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d011      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	3308      	adds	r3, #8
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb58 	bl	8004ea4 <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	2100      	movs	r1, #0
 8004814:	61b9      	str	r1, [r7, #24]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d011      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482a:	3308      	adds	r3, #8
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fb38 	bl	8004ea4 <RCCEx_PLL2_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800483a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	2100      	movs	r1, #0
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004860:	460b      	mov	r3, r1
 8004862:	4313      	orrs	r3, r2
 8004864:	d011      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	3328      	adds	r3, #40	; 0x28
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fbca 	bl	8005008 <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	2100      	movs	r1, #0
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048a0:	460b      	mov	r3, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	3328      	adds	r3, #40	; 0x28
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fbaa 	bl	8005008 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	2100      	movs	r1, #0
 80048d4:	6039      	str	r1, [r7, #0]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d011      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ea:	3328      	adds	r3, #40	; 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb8a 	bl	8005008 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800490a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
}
 8004918:	4618      	mov	r0, r3
 800491a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004924:	58024400 	.word	0x58024400

08004928 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800492c:	f7fe fd96 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4904      	ldr	r1, [pc, #16]	; (8004950 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004948:	4618      	mov	r0, r3
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58024400 	.word	0x58024400
 8004950:	0800699c 	.word	0x0800699c

08004954 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800495c:	4ba1      	ldr	r3, [pc, #644]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004966:	4b9f      	ldr	r3, [pc, #636]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	0b1b      	lsrs	r3, r3, #12
 800496c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004970:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004972:	4b9c      	ldr	r3, [pc, #624]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800497e:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8111 	beq.w	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f000 8083 	beq.w	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f200 80a1 	bhi.w	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d056      	beq.n	8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049be:	e099      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c0:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02d      	beq.n	8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049cc:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	08db      	lsrs	r3, r3, #3
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	4a84      	ldr	r2, [pc, #528]	; (8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a26:	e087      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6a:	e065      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aae:	e043      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	e021      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b38:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	0a5b      	lsrs	r3, r3, #9
 8004b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5e:	ee17 2a90 	vmov	r2, s15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b66:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8c:	ee17 2a90 	vmov	r2, s15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bba:	ee17 2a90 	vmov	r2, s15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
}
 8004bd6:	bf00      	nop
 8004bd8:	3724      	adds	r7, #36	; 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	46000000 	.word	0x46000000
 8004bf0:	4c742400 	.word	0x4c742400
 8004bf4:	4a742400 	.word	0x4a742400
 8004bf8:	4af42400 	.word	0x4af42400

08004bfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c04:	4ba1      	ldr	r3, [pc, #644]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c0e:	4b9f      	ldr	r3, [pc, #636]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	0d1b      	lsrs	r3, r3, #20
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c1a:	4b9c      	ldr	r3, [pc, #624]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c26:	4b99      	ldr	r3, [pc, #612]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	08db      	lsrs	r3, r3, #3
 8004c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8111 	beq.w	8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	f000 8083 	beq.w	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	f200 80a1 	bhi.w	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d056      	beq.n	8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c66:	e099      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c68:	4b88      	ldr	r3, [pc, #544]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02d      	beq.n	8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c74:	4b85      	ldr	r3, [pc, #532]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	4a84      	ldr	r2, [pc, #528]	; (8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b7b      	ldr	r3, [pc, #492]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cce:	e087      	b.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e065      	b.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e043      	b.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	e021      	b.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	0a5b      	lsrs	r3, r3, #9
 8004de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e06:	ee17 2a90 	vmov	r2, s15
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e34:	ee17 2a90 	vmov	r2, s15
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	0e1b      	lsrs	r3, r3, #24
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e62:	ee17 2a90 	vmov	r2, s15
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	3724      	adds	r7, #36	; 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	03d09000 	.word	0x03d09000
 8004e94:	46000000 	.word	0x46000000
 8004e98:	4c742400 	.word	0x4c742400
 8004e9c:	4a742400 	.word	0x4a742400
 8004ea0:	4af42400 	.word	0x4af42400

08004ea4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eb2:	4b53      	ldr	r3, [pc, #332]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d101      	bne.n	8004ec2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e099      	b.n	8004ff6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a4e      	ldr	r2, [pc, #312]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004ec8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ece:	f7fc f963 	bl	8001198 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ed6:	f7fc f95f 	bl	8001198 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e086      	b.n	8004ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ee8:	4b45      	ldr	r3, [pc, #276]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	031b      	lsls	r3, r3, #12
 8004f02:	493f      	ldr	r1, [pc, #252]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	628b      	str	r3, [r1, #40]	; 0x28
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	025b      	lsls	r3, r3, #9
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f38:	4931      	ldr	r1, [pc, #196]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	492d      	ldr	r1, [pc, #180]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f50:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f023 0220 	bic.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	4928      	ldr	r1, [pc, #160]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4a26      	ldr	r2, [pc, #152]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f023 0310 	bic.w	r3, r3, #16
 8004f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <RCCEx_PLL2_Config+0x160>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	69d2      	ldr	r2, [r2, #28]
 8004f7a:	00d2      	lsls	r2, r2, #3
 8004f7c:	4920      	ldr	r1, [pc, #128]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f82:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f88:	f043 0310 	orr.w	r3, r3, #16
 8004f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	4a19      	ldr	r2, [pc, #100]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fa0:	e00f      	b.n	8004fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d106      	bne.n	8004fb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb4:	e005      	b.n	8004fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fb6:	4b12      	ldr	r3, [pc, #72]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fce:	f7fc f8e3 	bl	8001198 <HAL_GetTick>
 8004fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fd6:	f7fc f8df 	bl	8001198 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <RCCEx_PLL2_Config+0x15c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	58024400 	.word	0x58024400
 8005004:	ffff0007 	.word	0xffff0007

08005008 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005016:	4b53      	ldr	r3, [pc, #332]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d101      	bne.n	8005026 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e099      	b.n	800515a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005026:	4b4f      	ldr	r3, [pc, #316]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a4e      	ldr	r2, [pc, #312]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800502c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005032:	f7fc f8b1 	bl	8001198 <HAL_GetTick>
 8005036:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005038:	e008      	b.n	800504c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800503a:	f7fc f8ad 	bl	8001198 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e086      	b.n	800515a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800504c:	4b45      	ldr	r3, [pc, #276]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005058:	4b42      	ldr	r3, [pc, #264]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	051b      	lsls	r3, r3, #20
 8005066:	493f      	ldr	r1, [pc, #252]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	628b      	str	r3, [r1, #40]	; 0x28
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	3b01      	subs	r3, #1
 8005072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	3b01      	subs	r3, #1
 800507c:	025b      	lsls	r3, r3, #9
 800507e:	b29b      	uxth	r3, r3
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	3b01      	subs	r3, #1
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	3b01      	subs	r3, #1
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800509c:	4931      	ldr	r1, [pc, #196]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050a2:	4b30      	ldr	r3, [pc, #192]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	492d      	ldr	r1, [pc, #180]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050b4:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	4928      	ldr	r1, [pc, #160]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050c6:	4b27      	ldr	r3, [pc, #156]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <RCCEx_PLL3_Config+0x160>)
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	69d2      	ldr	r2, [r2, #28]
 80050de:	00d2      	lsls	r2, r2, #3
 80050e0:	4920      	ldr	r1, [pc, #128]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050e6:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050f8:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005104:	e00f      	b.n	8005126 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800510c:	4b15      	ldr	r3, [pc, #84]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005112:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005118:	e005      	b.n	8005126 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a11      	ldr	r2, [pc, #68]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc f831 	bl	8001198 <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800513a:	f7fc f82d 	bl	8001198 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e006      	b.n	800515a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <RCCEx_PLL3_Config+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	ffff0007 	.word	0xffff0007

0800516c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e042      	b.n	8005204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fb fe21 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2224      	movs	r2, #36	; 0x24
 800519a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f82c 	bl	800520c <UART_SetConfig>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e022      	b.n	8005204 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fd88 	bl	8005cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fe0f 	bl	8005e20 <UART_CheckIdleState>
 8005202:	4603      	mov	r3, r0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b092      	sub	sp, #72	; 0x48
 8005212:	af00      	add	r7, sp, #0
 8005214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	4313      	orrs	r3, r2
 8005232:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4bbe      	ldr	r3, [pc, #760]	; (8005534 <UART_SetConfig+0x328>)
 800523c:	4013      	ands	r3, r2
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005244:	430b      	orrs	r3, r1
 8005246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4ab3      	ldr	r2, [pc, #716]	; (8005538 <UART_SetConfig+0x32c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005274:	4313      	orrs	r3, r2
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	4baf      	ldr	r3, [pc, #700]	; (800553c <UART_SetConfig+0x330>)
 8005280:	4013      	ands	r3, r2
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005288:	430b      	orrs	r3, r1
 800528a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f023 010f 	bic.w	r1, r3, #15
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4aa6      	ldr	r2, [pc, #664]	; (8005540 <UART_SetConfig+0x334>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d177      	bne.n	800539c <UART_SetConfig+0x190>
 80052ac:	4ba5      	ldr	r3, [pc, #660]	; (8005544 <UART_SetConfig+0x338>)
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b4:	2b28      	cmp	r3, #40	; 0x28
 80052b6:	d86d      	bhi.n	8005394 <UART_SetConfig+0x188>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0xb4>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	08005365 	.word	0x08005365
 80052c4:	08005395 	.word	0x08005395
 80052c8:	08005395 	.word	0x08005395
 80052cc:	08005395 	.word	0x08005395
 80052d0:	08005395 	.word	0x08005395
 80052d4:	08005395 	.word	0x08005395
 80052d8:	08005395 	.word	0x08005395
 80052dc:	08005395 	.word	0x08005395
 80052e0:	0800536d 	.word	0x0800536d
 80052e4:	08005395 	.word	0x08005395
 80052e8:	08005395 	.word	0x08005395
 80052ec:	08005395 	.word	0x08005395
 80052f0:	08005395 	.word	0x08005395
 80052f4:	08005395 	.word	0x08005395
 80052f8:	08005395 	.word	0x08005395
 80052fc:	08005395 	.word	0x08005395
 8005300:	08005375 	.word	0x08005375
 8005304:	08005395 	.word	0x08005395
 8005308:	08005395 	.word	0x08005395
 800530c:	08005395 	.word	0x08005395
 8005310:	08005395 	.word	0x08005395
 8005314:	08005395 	.word	0x08005395
 8005318:	08005395 	.word	0x08005395
 800531c:	08005395 	.word	0x08005395
 8005320:	0800537d 	.word	0x0800537d
 8005324:	08005395 	.word	0x08005395
 8005328:	08005395 	.word	0x08005395
 800532c:	08005395 	.word	0x08005395
 8005330:	08005395 	.word	0x08005395
 8005334:	08005395 	.word	0x08005395
 8005338:	08005395 	.word	0x08005395
 800533c:	08005395 	.word	0x08005395
 8005340:	08005385 	.word	0x08005385
 8005344:	08005395 	.word	0x08005395
 8005348:	08005395 	.word	0x08005395
 800534c:	08005395 	.word	0x08005395
 8005350:	08005395 	.word	0x08005395
 8005354:	08005395 	.word	0x08005395
 8005358:	08005395 	.word	0x08005395
 800535c:	08005395 	.word	0x08005395
 8005360:	0800538d 	.word	0x0800538d
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e222      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e21e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e21a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e216      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005384:	2320      	movs	r3, #32
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e212      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800538c:	2340      	movs	r3, #64	; 0x40
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e20e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e20a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a69      	ldr	r2, [pc, #420]	; (8005548 <UART_SetConfig+0x33c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d130      	bne.n	8005408 <UART_SetConfig+0x1fc>
 80053a6:	4b67      	ldr	r3, [pc, #412]	; (8005544 <UART_SetConfig+0x338>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d826      	bhi.n	8005400 <UART_SetConfig+0x1f4>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x1ac>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e1ec      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e1e8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e1e4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e1e0      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053f0:	2320      	movs	r3, #32
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e1dc      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e1d8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e1d4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a4f      	ldr	r2, [pc, #316]	; (800554c <UART_SetConfig+0x340>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d130      	bne.n	8005474 <UART_SetConfig+0x268>
 8005412:	4b4c      	ldr	r3, [pc, #304]	; (8005544 <UART_SetConfig+0x338>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b05      	cmp	r3, #5
 800541c:	d826      	bhi.n	800546c <UART_SetConfig+0x260>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x218>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e1b6      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e1b2      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e1ae      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e1aa      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e1a6      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e1a2      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e19e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a35      	ldr	r2, [pc, #212]	; (8005550 <UART_SetConfig+0x344>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d130      	bne.n	80054e0 <UART_SetConfig+0x2d4>
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <UART_SetConfig+0x338>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b05      	cmp	r3, #5
 8005488:	d826      	bhi.n	80054d8 <UART_SetConfig+0x2cc>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x284>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054b1 	.word	0x080054b1
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e180      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e17c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e178      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e174      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e170      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e16c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e168      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <UART_SetConfig+0x348>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d142      	bne.n	8005570 <UART_SetConfig+0x364>
 80054ea:	4b16      	ldr	r3, [pc, #88]	; (8005544 <UART_SetConfig+0x338>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d838      	bhi.n	8005568 <UART_SetConfig+0x35c>
 80054f6:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x2f0>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005515 	.word	0x08005515
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005525 	.word	0x08005525
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005559 	.word	0x08005559
 8005510:	08005561 	.word	0x08005561
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e14a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e146      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e142      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e13e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005534:	cfff69f3 	.word	0xcfff69f3
 8005538:	58000c00 	.word	0x58000c00
 800553c:	11fff4ff 	.word	0x11fff4ff
 8005540:	40011000 	.word	0x40011000
 8005544:	58024400 	.word	0x58024400
 8005548:	40004400 	.word	0x40004400
 800554c:	40004800 	.word	0x40004800
 8005550:	40004c00 	.word	0x40004c00
 8005554:	40005000 	.word	0x40005000
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e128      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e124      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e120      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4acb      	ldr	r2, [pc, #812]	; (80058a4 <UART_SetConfig+0x698>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d176      	bne.n	8005668 <UART_SetConfig+0x45c>
 800557a:	4bcb      	ldr	r3, [pc, #812]	; (80058a8 <UART_SetConfig+0x69c>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005582:	2b28      	cmp	r3, #40	; 0x28
 8005584:	d86c      	bhi.n	8005660 <UART_SetConfig+0x454>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x380>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	08005631 	.word	0x08005631
 8005590:	08005661 	.word	0x08005661
 8005594:	08005661 	.word	0x08005661
 8005598:	08005661 	.word	0x08005661
 800559c:	08005661 	.word	0x08005661
 80055a0:	08005661 	.word	0x08005661
 80055a4:	08005661 	.word	0x08005661
 80055a8:	08005661 	.word	0x08005661
 80055ac:	08005639 	.word	0x08005639
 80055b0:	08005661 	.word	0x08005661
 80055b4:	08005661 	.word	0x08005661
 80055b8:	08005661 	.word	0x08005661
 80055bc:	08005661 	.word	0x08005661
 80055c0:	08005661 	.word	0x08005661
 80055c4:	08005661 	.word	0x08005661
 80055c8:	08005661 	.word	0x08005661
 80055cc:	08005641 	.word	0x08005641
 80055d0:	08005661 	.word	0x08005661
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005661 	.word	0x08005661
 80055dc:	08005661 	.word	0x08005661
 80055e0:	08005661 	.word	0x08005661
 80055e4:	08005661 	.word	0x08005661
 80055e8:	08005661 	.word	0x08005661
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005661 	.word	0x08005661
 80055f4:	08005661 	.word	0x08005661
 80055f8:	08005661 	.word	0x08005661
 80055fc:	08005661 	.word	0x08005661
 8005600:	08005661 	.word	0x08005661
 8005604:	08005661 	.word	0x08005661
 8005608:	08005661 	.word	0x08005661
 800560c:	08005651 	.word	0x08005651
 8005610:	08005661 	.word	0x08005661
 8005614:	08005661 	.word	0x08005661
 8005618:	08005661 	.word	0x08005661
 800561c:	08005661 	.word	0x08005661
 8005620:	08005661 	.word	0x08005661
 8005624:	08005661 	.word	0x08005661
 8005628:	08005661 	.word	0x08005661
 800562c:	08005659 	.word	0x08005659
 8005630:	2301      	movs	r3, #1
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005636:	e0bc      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563e:	e0b8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e0b4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e0b0      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005650:	2320      	movs	r3, #32
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e0ac      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e0a8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e0a4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a8f      	ldr	r2, [pc, #572]	; (80058ac <UART_SetConfig+0x6a0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d130      	bne.n	80056d4 <UART_SetConfig+0x4c8>
 8005672:	4b8d      	ldr	r3, [pc, #564]	; (80058a8 <UART_SetConfig+0x69c>)
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b05      	cmp	r3, #5
 800567c:	d826      	bhi.n	80056cc <UART_SetConfig+0x4c0>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x478>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	0800569d 	.word	0x0800569d
 8005688:	080056a5 	.word	0x080056a5
 800568c:	080056ad 	.word	0x080056ad
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a2:	e086      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e082      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e07e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e07a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056bc:	2320      	movs	r3, #32
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e076      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e072      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e06e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a75      	ldr	r2, [pc, #468]	; (80058b0 <UART_SetConfig+0x6a4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d130      	bne.n	8005740 <UART_SetConfig+0x534>
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <UART_SetConfig+0x69c>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d826      	bhi.n	8005738 <UART_SetConfig+0x52c>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x4e4>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570e:	e050      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005716:	e04c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e048      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e044      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e040      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e03c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e038      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a5b      	ldr	r2, [pc, #364]	; (80058b4 <UART_SetConfig+0x6a8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d130      	bne.n	80057ac <UART_SetConfig+0x5a0>
 800574a:	4b57      	ldr	r3, [pc, #348]	; (80058a8 <UART_SetConfig+0x69c>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b05      	cmp	r3, #5
 8005754:	d826      	bhi.n	80057a4 <UART_SetConfig+0x598>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x550>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005775 	.word	0x08005775
 8005760:	0800577d 	.word	0x0800577d
 8005764:	08005785 	.word	0x08005785
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e01a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e016      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e012      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e00e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e00a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e006      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e002      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3f      	ldr	r2, [pc, #252]	; (80058b4 <UART_SetConfig+0x6a8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	f040 80f8 	bne.w	80059ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	dc46      	bgt.n	8005854 <UART_SetConfig+0x648>
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	f2c0 8082 	blt.w	80058d0 <UART_SetConfig+0x6c4>
 80057cc:	3b02      	subs	r3, #2
 80057ce:	2b1e      	cmp	r3, #30
 80057d0:	d87e      	bhi.n	80058d0 <UART_SetConfig+0x6c4>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x5cc>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800585b 	.word	0x0800585b
 80057dc:	080058d1 	.word	0x080058d1
 80057e0:	08005863 	.word	0x08005863
 80057e4:	080058d1 	.word	0x080058d1
 80057e8:	080058d1 	.word	0x080058d1
 80057ec:	080058d1 	.word	0x080058d1
 80057f0:	08005873 	.word	0x08005873
 80057f4:	080058d1 	.word	0x080058d1
 80057f8:	080058d1 	.word	0x080058d1
 80057fc:	080058d1 	.word	0x080058d1
 8005800:	080058d1 	.word	0x080058d1
 8005804:	080058d1 	.word	0x080058d1
 8005808:	080058d1 	.word	0x080058d1
 800580c:	080058d1 	.word	0x080058d1
 8005810:	08005883 	.word	0x08005883
 8005814:	080058d1 	.word	0x080058d1
 8005818:	080058d1 	.word	0x080058d1
 800581c:	080058d1 	.word	0x080058d1
 8005820:	080058d1 	.word	0x080058d1
 8005824:	080058d1 	.word	0x080058d1
 8005828:	080058d1 	.word	0x080058d1
 800582c:	080058d1 	.word	0x080058d1
 8005830:	080058d1 	.word	0x080058d1
 8005834:	080058d1 	.word	0x080058d1
 8005838:	080058d1 	.word	0x080058d1
 800583c:	080058d1 	.word	0x080058d1
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058c3 	.word	0x080058c3
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d037      	beq.n	80058c8 <UART_SetConfig+0x6bc>
 8005858:	e03a      	b.n	80058d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800585a:	f7ff f865 	bl	8004928 <HAL_RCCEx_GetD3PCLK1Freq>
 800585e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005860:	e03c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff f874 	bl	8004954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005870:	e034      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005872:	f107 0318 	add.w	r3, r7, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff f9c0 	bl	8004bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005880:	e02c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <UART_SetConfig+0x69c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <UART_SetConfig+0x69c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <UART_SetConfig+0x6ac>)
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a0:	e01c      	b.n	80058dc <UART_SetConfig+0x6d0>
 80058a2:	bf00      	nop
 80058a4:	40011400 	.word	0x40011400
 80058a8:	58024400 	.word	0x58024400
 80058ac:	40007800 	.word	0x40007800
 80058b0:	40007c00 	.word	0x40007c00
 80058b4:	58000c00 	.word	0x58000c00
 80058b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b9d      	ldr	r3, [pc, #628]	; (8005b34 <UART_SetConfig+0x928>)
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c0:	e00c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058c2:	4b9d      	ldr	r3, [pc, #628]	; (8005b38 <UART_SetConfig+0x92c>)
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c6:	e009      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ce:	e005      	b.n	80058dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 81de 	beq.w	8005ca0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4a94      	ldr	r2, [pc, #592]	; (8005b3c <UART_SetConfig+0x930>)
 80058ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	429a      	cmp	r2, r3
 8005906:	d305      	bcc.n	8005914 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800591a:	e1c1      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	2200      	movs	r2, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	60fa      	str	r2, [r7, #12]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4a84      	ldr	r2, [pc, #528]	; (8005b3c <UART_SetConfig+0x930>)
 800592a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592e:	b29b      	uxth	r3, r3
 8005930:	2200      	movs	r2, #0
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800593e:	f7fa fccb 	bl	80002d8 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	020b      	lsls	r3, r1, #8
 8005954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005958:	0202      	lsls	r2, r0, #8
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	6849      	ldr	r1, [r1, #4]
 800595e:	0849      	lsrs	r1, r1, #1
 8005960:	2000      	movs	r0, #0
 8005962:	460c      	mov	r4, r1
 8005964:	4605      	mov	r5, r0
 8005966:	eb12 0804 	adds.w	r8, r2, r4
 800596a:	eb43 0905 	adc.w	r9, r3, r5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	469a      	mov	sl, r3
 8005976:	4693      	mov	fp, r2
 8005978:	4652      	mov	r2, sl
 800597a:	465b      	mov	r3, fp
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fa fcaa 	bl	80002d8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4613      	mov	r3, r2
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005992:	d308      	bcc.n	80059a6 <UART_SetConfig+0x79a>
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d204      	bcs.n	80059a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	e17c      	b.n	8005ca0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059ac:	e178      	b.n	8005ca0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	f040 80c5 	bne.w	8005b44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059be:	2b20      	cmp	r3, #32
 80059c0:	dc48      	bgt.n	8005a54 <UART_SetConfig+0x848>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db7b      	blt.n	8005abe <UART_SetConfig+0x8b2>
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d879      	bhi.n	8005abe <UART_SetConfig+0x8b2>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x7c4>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	08005a5b 	.word	0x08005a5b
 80059d4:	08005a63 	.word	0x08005a63
 80059d8:	08005abf 	.word	0x08005abf
 80059dc:	08005abf 	.word	0x08005abf
 80059e0:	08005a6b 	.word	0x08005a6b
 80059e4:	08005abf 	.word	0x08005abf
 80059e8:	08005abf 	.word	0x08005abf
 80059ec:	08005abf 	.word	0x08005abf
 80059f0:	08005a7b 	.word	0x08005a7b
 80059f4:	08005abf 	.word	0x08005abf
 80059f8:	08005abf 	.word	0x08005abf
 80059fc:	08005abf 	.word	0x08005abf
 8005a00:	08005abf 	.word	0x08005abf
 8005a04:	08005abf 	.word	0x08005abf
 8005a08:	08005abf 	.word	0x08005abf
 8005a0c:	08005abf 	.word	0x08005abf
 8005a10:	08005a8b 	.word	0x08005a8b
 8005a14:	08005abf 	.word	0x08005abf
 8005a18:	08005abf 	.word	0x08005abf
 8005a1c:	08005abf 	.word	0x08005abf
 8005a20:	08005abf 	.word	0x08005abf
 8005a24:	08005abf 	.word	0x08005abf
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005abf 	.word	0x08005abf
 8005a38:	08005abf 	.word	0x08005abf
 8005a3c:	08005abf 	.word	0x08005abf
 8005a40:	08005abf 	.word	0x08005abf
 8005a44:	08005abf 	.word	0x08005abf
 8005a48:	08005abf 	.word	0x08005abf
 8005a4c:	08005abf 	.word	0x08005abf
 8005a50:	08005ab1 	.word	0x08005ab1
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d02e      	beq.n	8005ab6 <UART_SetConfig+0x8aa>
 8005a58:	e031      	b.n	8005abe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fd fd2f 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8005a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a60:	e033      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a62:	f7fd fd41 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 8005a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a68:	e02f      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe ff70 	bl	8004954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a78:	e027      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f8bc 	bl	8004bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a88:	e01f      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a8a:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <UART_SetConfig+0x934>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a96:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <UART_SetConfig+0x934>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	4a24      	ldr	r2, [pc, #144]	; (8005b34 <UART_SetConfig+0x928>)
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa8:	e00f      	b.n	8005aca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <UART_SetConfig+0x928>)
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aae:	e00c      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <UART_SetConfig+0x92c>)
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005abc:	e005      	b.n	8005aca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80e7 	beq.w	8005ca0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <UART_SetConfig+0x930>)
 8005ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005adc:	461a      	mov	r2, r3
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae4:	005a      	lsls	r2, r3, #1
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d916      	bls.n	8005b2c <UART_SetConfig+0x920>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d212      	bcs.n	8005b2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f023 030f 	bic.w	r3, r3, #15
 8005b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e0b9      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b32:	e0b5      	b.n	8005ca0 <UART_SetConfig+0xa94>
 8005b34:	03d09000 	.word	0x03d09000
 8005b38:	003d0900 	.word	0x003d0900
 8005b3c:	080069ac 	.word	0x080069ac
 8005b40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	dc49      	bgt.n	8005be0 <UART_SetConfig+0x9d4>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	db7c      	blt.n	8005c4a <UART_SetConfig+0xa3e>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d87a      	bhi.n	8005c4a <UART_SetConfig+0xa3e>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x950>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005be7 	.word	0x08005be7
 8005b60:	08005bef 	.word	0x08005bef
 8005b64:	08005c4b 	.word	0x08005c4b
 8005b68:	08005c4b 	.word	0x08005c4b
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005c4b 	.word	0x08005c4b
 8005b74:	08005c4b 	.word	0x08005c4b
 8005b78:	08005c4b 	.word	0x08005c4b
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c4b 	.word	0x08005c4b
 8005b84:	08005c4b 	.word	0x08005c4b
 8005b88:	08005c4b 	.word	0x08005c4b
 8005b8c:	08005c4b 	.word	0x08005c4b
 8005b90:	08005c4b 	.word	0x08005c4b
 8005b94:	08005c4b 	.word	0x08005c4b
 8005b98:	08005c4b 	.word	0x08005c4b
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c4b 	.word	0x08005c4b
 8005ba4:	08005c4b 	.word	0x08005c4b
 8005ba8:	08005c4b 	.word	0x08005c4b
 8005bac:	08005c4b 	.word	0x08005c4b
 8005bb0:	08005c4b 	.word	0x08005c4b
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005c4b 	.word	0x08005c4b
 8005bbc:	08005c4b 	.word	0x08005c4b
 8005bc0:	08005c4b 	.word	0x08005c4b
 8005bc4:	08005c4b 	.word	0x08005c4b
 8005bc8:	08005c4b 	.word	0x08005c4b
 8005bcc:	08005c4b 	.word	0x08005c4b
 8005bd0:	08005c4b 	.word	0x08005c4b
 8005bd4:	08005c4b 	.word	0x08005c4b
 8005bd8:	08005c4b 	.word	0x08005c4b
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d02e      	beq.n	8005c42 <UART_SetConfig+0xa36>
 8005be4:	e031      	b.n	8005c4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7fd fc69 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8005bea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bec:	e033      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bee:	f7fd fc7b 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 8005bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bf4:	e02f      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe feaa 	bl	8004954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c04:	e027      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c06:	f107 0318 	add.w	r3, r7, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fff6 	bl	8004bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c14:	e01f      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c16:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <UART_SetConfig+0xac0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <UART_SetConfig+0xac0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <UART_SetConfig+0xac4>)
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c36:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <UART_SetConfig+0xac4>)
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3a:	e00c      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c3c:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <UART_SetConfig+0xac8>)
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c40:	e009      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c48:	e005      	b.n	8005c56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c54:	bf00      	nop
    }

    if (pclk != 0U)
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d021      	beq.n	8005ca0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <UART_SetConfig+0xacc>)
 8005c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c66:	461a      	mov	r2, r3
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	441a      	add	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	d909      	bls.n	8005c9a <UART_SetConfig+0xa8e>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d205      	bcs.n	8005c9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e002      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3748      	adds	r7, #72	; 0x48
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	03d09000 	.word	0x03d09000
 8005cd4:	003d0900 	.word	0x003d0900
 8005cd8:	080069ac 	.word	0x080069ac

08005cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dda:	d10a      	bne.n	8005df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b098      	sub	sp, #96	; 0x60
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e30:	f7fb f9b2 	bl	8001198 <HAL_GetTick>
 8005e34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d12f      	bne.n	8005ea4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f88e 	bl	8005f74 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d022      	beq.n	8005ea4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e72:	653b      	str	r3, [r7, #80]	; 0x50
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e063      	b.n	8005f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d149      	bne.n	8005f46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f857 	bl	8005f74 <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03c      	beq.n	8005f46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
 8005eec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e6      	bne.n	8005ecc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1e:	61fa      	str	r2, [r7, #28]
 8005f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e012      	b.n	8005f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3758      	adds	r7, #88	; 0x58
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f84:	e049      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d045      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fb f903 	bl	8001198 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e048      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d031      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d110      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f839 	bl	8006044 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e029      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff4:	d111      	bne.n	800601a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f81f 	bl	8006044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00f      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	429a      	cmp	r2, r3
 8006036:	d0a6      	beq.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b095      	sub	sp, #84	; 0x54
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606a:	643b      	str	r3, [r7, #64]	; 0x40
 800606c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	61fb      	str	r3, [r7, #28]
   return(result);
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <UART_EndRxTransfer+0xc8>)
 8006092:	4013      	ands	r3, r2
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800609e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d118      	bne.n	80060ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0310 	bic.w	r3, r3, #16
 80060ce:	647b      	str	r3, [r7, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	613b      	str	r3, [r7, #16]
   return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006100:	bf00      	nop
 8006102:	3754      	adds	r7, #84	; 0x54
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	effffffe 	.word	0xeffffffe

08006110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_UARTEx_DisableFifoMode+0x16>
 8006122:	2302      	movs	r3, #2
 8006124:	e027      	b.n	8006176 <HAL_UARTEx_DisableFifoMode+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2224      	movs	r2, #36	; 0x24
 8006132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006196:	2302      	movs	r3, #2
 8006198:	e02d      	b.n	80061f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2224      	movs	r2, #36	; 0x24
 80061a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f850 	bl	800627c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006212:	2302      	movs	r3, #2
 8006214:	e02d      	b.n	8006272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f812 	bl	800627c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006288:	2b00      	cmp	r3, #0
 800628a:	d108      	bne.n	800629e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800629c:	e031      	b.n	8006302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800629e:	2310      	movs	r3, #16
 80062a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062a2:	2310      	movs	r3, #16
 80062a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	0e5b      	lsrs	r3, r3, #25
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	0f5b      	lsrs	r3, r3, #29
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	7b3a      	ldrb	r2, [r7, #12]
 80062ca:	4911      	ldr	r1, [pc, #68]	; (8006310 <UARTEx_SetNbDataToProcess+0x94>)
 80062cc:	5c8a      	ldrb	r2, [r1, r2]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062d2:	7b3a      	ldrb	r2, [r7, #12]
 80062d4:	490f      	ldr	r1, [pc, #60]	; (8006314 <UARTEx_SetNbDataToProcess+0x98>)
 80062d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	7b7a      	ldrb	r2, [r7, #13]
 80062e8:	4909      	ldr	r1, [pc, #36]	; (8006310 <UARTEx_SetNbDataToProcess+0x94>)
 80062ea:	5c8a      	ldrb	r2, [r1, r2]
 80062ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062f0:	7b7a      	ldrb	r2, [r7, #13]
 80062f2:	4908      	ldr	r1, [pc, #32]	; (8006314 <UARTEx_SetNbDataToProcess+0x98>)
 80062f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	080069c4 	.word	0x080069c4
 8006314:	080069cc 	.word	0x080069cc

08006318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006318:	b084      	sub	sp, #16
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	f107 001c 	add.w	r0, r7, #28
 8006326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2b01      	cmp	r3, #1
 800632e:	d120      	bne.n	8006372 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <USB_CoreInit+0xd4>)
 8006342:	4013      	ands	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d105      	bne.n	8006366 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 faac 	bl	80068c4 <USB_CoreReset>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	e01a      	b.n	80063a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 faa0 	bl	80068c4 <USB_CoreReset>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
 800639a:	e005      	b.n	80063a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d116      	bne.n	80063dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <USB_CoreInit+0xd8>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f043 0206 	orr.w	r2, r3, #6
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr
 80063ec:	ffbdffbf 	.word	0xffbdffbf
 80063f0:	03ee0000 	.word	0x03ee0000

080063f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 0201 	bic.w	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d115      	bne.n	8006464 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006444:	2001      	movs	r0, #1
 8006446:	f7fa feb3 	bl	80011b0 <HAL_Delay>
      ms++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa29 	bl	80068a8 <USB_GetMode>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d01e      	beq.n	800649a <USB_SetCurrentMode+0x84>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b31      	cmp	r3, #49	; 0x31
 8006460:	d9f0      	bls.n	8006444 <USB_SetCurrentMode+0x2e>
 8006462:	e01a      	b.n	800649a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d115      	bne.n	8006496 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006476:	2001      	movs	r0, #1
 8006478:	f7fa fe9a 	bl	80011b0 <HAL_Delay>
      ms++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa10 	bl	80068a8 <USB_GetMode>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <USB_SetCurrentMode+0x84>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b31      	cmp	r3, #49	; 0x31
 8006492:	d9f0      	bls.n	8006476 <USB_SetCurrentMode+0x60>
 8006494:	e001      	b.n	800649a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e005      	b.n	80064a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b32      	cmp	r3, #50	; 0x32
 800649e:	d101      	bne.n	80064a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b0:	b084      	sub	sp, #16
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e009      	b.n	80064e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3340      	adds	r3, #64	; 0x40
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3301      	adds	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b0e      	cmp	r3, #14
 80064e8:	d9f2      	bls.n	80064d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11c      	bne.n	800652a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e005      	b.n	8006536 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	4619      	mov	r1, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006550:	461a      	mov	r2, r3
 8006552:	680b      	ldr	r3, [r1, #0]
 8006554:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b01      	cmp	r3, #1
 800655a:	d10c      	bne.n	8006576 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006562:	2100      	movs	r1, #0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f965 	bl	8006834 <USB_SetDevSpeed>
 800656a:	e008      	b.n	800657e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800656c:	2101      	movs	r1, #1
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f960 	bl	8006834 <USB_SetDevSpeed>
 8006574:	e003      	b.n	800657e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006576:	2103      	movs	r1, #3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f95b 	bl	8006834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800657e:	2110      	movs	r1, #16
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8f3 	bl	800676c <USB_FlushTxFifo>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f91f 	bl	80067d4 <USB_FlushRxFifo>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	461a      	mov	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b2:	461a      	mov	r2, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	e043      	b.n	8006652 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e0:	d118      	bne.n	8006614 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	461a      	mov	r2, r3
 80065f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e013      	b.n	8006626 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	461a      	mov	r2, r3
 800660c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e008      	b.n	8006626 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	461a      	mov	r2, r3
 8006622:	2300      	movs	r3, #0
 8006624:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	461a      	mov	r2, r3
 8006646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800664a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3301      	adds	r3, #1
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3b7      	bcc.n	80065ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	e043      	b.n	80066e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006676:	d118      	bne.n	80066aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e013      	b.n	80066bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e008      	b.n	80066bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	461a      	mov	r2, r3
 80066dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3301      	adds	r3, #1
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3b7      	bcc.n	8006660 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006702:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006710:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f043 0210 	orr.w	r2, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <USB_DevInit+0x2b4>)
 800672a:	4313      	orrs	r3, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f043 0208 	orr.w	r2, r3, #8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d105      	bne.n	8006754 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <USB_DevInit+0x2b8>)
 800674e:	4313      	orrs	r3, r2
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006760:	b004      	add	sp, #16
 8006762:	4770      	bx	lr
 8006764:	803c3800 	.word	0x803c3800
 8006768:	40000004 	.word	0x40000004

0800676c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <USB_FlushTxFifo+0x64>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e01b      	b.n	80067c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	daf2      	bge.n	800677a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	019b      	lsls	r3, r3, #6
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <USB_FlushTxFifo+0x64>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d901      	bls.n	80067b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e006      	b.n	80067c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d0f0      	beq.n	80067a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	00030d40 	.word	0x00030d40

080067d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a11      	ldr	r2, [pc, #68]	; (8006830 <USB_FlushRxFifo+0x5c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e018      	b.n	8006824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	daf2      	bge.n	80067e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2210      	movs	r2, #16
 8006802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a08      	ldr	r2, [pc, #32]	; (8006830 <USB_FlushRxFifo+0x5c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d901      	bls.n	8006816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e006      	b.n	8006824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d0f0      	beq.n	8006804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	00030d40 	.word	0x00030d40

08006834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0301 	and.w	r3, r3, #1
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <USB_CoreReset+0x64>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e01b      	b.n	800691a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	daf2      	bge.n	80068d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a09      	ldr	r2, [pc, #36]	; (8006928 <USB_CoreReset+0x64>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e006      	b.n	800691a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d0f0      	beq.n	80068fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	00030d40 	.word	0x00030d40

0800692c <memset>:
 800692c:	4402      	add	r2, r0
 800692e:	4603      	mov	r3, r0
 8006930:	4293      	cmp	r3, r2
 8006932:	d100      	bne.n	8006936 <memset+0xa>
 8006934:	4770      	bx	lr
 8006936:	f803 1b01 	strb.w	r1, [r3], #1
 800693a:	e7f9      	b.n	8006930 <memset+0x4>

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	; (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	; (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	; (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	; (8006980 <__libc_init_array+0x44>)
 8006950:	f000 f818 	bl	8006984 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	080069dc 	.word	0x080069dc
 8006978:	080069dc 	.word	0x080069dc
 800697c:	080069dc 	.word	0x080069dc
 8006980:	080069e0 	.word	0x080069e0

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
